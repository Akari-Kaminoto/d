#ifndef DATA_DEFINITION_EXTENSIONAREA_H
#define DATA_DEFINITION_EXTENSIONAREA_H

#include "appfw.h"
#include "system_constants.h"
#include <stddef.h>

#define EXTENSIONAREA_DATAINFO                                                 \
  "{\"name\": \"ExtensionArea\", \"description\": "                            \
  "\"\u62e1\u5f35\u9818\u57df\", \"members\": [{\"name\": \"ext_reserved\", "  \
  "\"type\": \"uint8_t\", \"dimension\": [8], \"description\": \"RESERVED\", " \
  "\"ignore_naming_rule\": true}], \"ignore_naming_rule\": true, \"ads\": "    \
  "false, \"name_snake_case\": \"extension_area\"}"

#ifdef __cplusplus
extern "C" {
#endif

// ExtensionArea.hで定義されている型をシリアライズした時のバイト数
#define EXTENSIONAREA_SERIALIZED_SIZE (1 * (8))

// 定数の定義
#define EXTENSION_AREA_EXT_RESERVED_DIM1 ((size_t)8)

/* 拡張領域 */
typedef struct { uint8_t ext_reserved[8]; /* RESERVED */ } ExtensionArea;

size_t SerializeExtensionArea(void *buffer, ExtensionArea *data,
                              size_t max_buffer_size);
size_t DeserializeExtensionArea(ExtensionArea *data, void *buffer);
size_t SerializeExtensionAreaAutoRelease(void *buffer, void *data,
                                         size_t max_buffer_size);
size_t DeserializeExtensionAreaForDumper(void *data, void *buffer);
bool IsEqualExtensionArea(ExtensionArea *data1, ExtensionArea *data2);
void InitializeExtensionArea(ExtensionArea *data);
void InitializeDefaultOnlyExtensionArea(ExtensionArea *data);

#ifdef __cplusplus
}
#endif

#endif // DATA_DEFINITION_EXTENSIONAREA_H
