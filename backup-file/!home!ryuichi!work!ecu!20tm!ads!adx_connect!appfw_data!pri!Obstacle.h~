#ifndef DATA_DEFINITION_OBSTACLE_H
#define DATA_DEFINITION_OBSTACLE_H

#include "BoxSize.h"
#include "BoxSize.h"
#include "Point2D.h"
#include "Point2D.h"
#include "Point2D.h"
#include "Point2D.h"
#include "Point2D.h"
#include "Point2D.h"
#include "VelocityCom.h"
#include "VelocityCom.h"
#include "VelocityCom.h"
#include "VelocityCom.h"
#include "appfw.h"
#include "system_constants.h"
#include <stddef.h>

#define OBSTACLE_DATAINFO                                                      \
  "{\"name\": \"Obstacle\", \"description\": "                                 \
  "\"LUXECU\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b\u7269\u6a19\u30c7" \
  "\u30fc\u30bf\", \"members\": [{\"name\": \"id\", \"type\": \"uint32_t\", "  \
  "\"description\": \"ID\", \"ignore_naming_rule\": true}, {\"name\": "        \
  "\"flags\", \"type\": \"uint16_t\", \"description\": "                       \
  "\"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8flag\", \"ignore_naming_rule\": "     \
  "true}, {\"name\": \"age\", \"type\": \"uint16_t\", \"description\": "       \
  "\"\u8a08\u6e2c\u56de\u6570\", \"ignore_naming_rule\": true}, {\"name\": "   \
  "\"hidden_age\", \"type\": \"uint32_t\", \"description\": "                  \
  "\"lost\u5f8c\u306e\u56de\u6570\", \"ignore_naming_rule\": true}, "          \
  "{\"name\": \"classification\", \"type\": \"uint32_t\", \"description\": "   \
  "\"\u5206\u985e\", \"ignore_naming_rule\": true}, {\"name\": "               \
  "\"class_certainty\", \"type\": \"uint32_t\", \"description\": "             \
  "\"\u5206\u985e\u4fe1\u983c\u5ea6\", \"ignore_naming_rule\": true}, "        \
  "{\"name\": \"class_age\", \"type\": \"uint32_t\", \"description\": "        \
  "\"\u305d\u306e\u5206\u985e\u3067\u3042\u3063\u305f\u56de\u6570\", "         \
  "\"ignore_naming_rule\": true}, {\"name\": \"bound_box_center\", "           \
  "\"type\": " POINT2D_DATAINFO                                                \
  ", \"description\": \"\u5883\u754cbox\u306e\u4e2d\u5fc3\", "                 \
  "\"ignore_naming_rule\": true}, {\"name\": \"bound_box_size\", "             \
  "\"type\": " BOXSIZE_DATAINFO                                                \
  ", \"description\": \"\u5883\u754cbox\u306e\u30b5\u30a4\u30ba\", "           \
  "\"ignore_naming_rule\": true}, {\"name\": \"object_box_center\", "          \
  "\"type\": " POINT2D_DATAINFO                                                \
  ", \"description\": \"\u969c\u5bb3\u7269box\u306e\u4e2d\u5fc3\", "           \
  "\"ignore_naming_rule\": true}, {\"name\": \"object_box_center_sigma\", "    \
  "\"type\": " POINT2D_DATAINFO                                                \
  ", \"description\": "                                                        \
  "\"\u969c\u5bb3\u7269box\u306e\u4e2d\u5fc3\u306e\u6a19\u6e96\u504f\u5dee\"," \
  " \"ignore_naming_rule\": true}, {\"name\": \"object_box_size\", "           \
  "\"type\": " BOXSIZE_DATAINFO                                                \
  ", \"description\": \"\u969c\u5bb3\u7269box\u306e\u30b5\u30a4\u30ba\", "     \
  "\"ignore_naming_rule\": true}, {\"name\": \"yaw\", \"type\": \"double\", "  \
  "\"description\": \"yaw\u89d2\", \"ignore_naming_rule\": true}, {\"name\": " \
  "\"relative_velocity\", \"type\": " VELOCITYCOM_DATAINFO                     \
  ", \"description\": \"\u7d76\u5bfe\u901f\u5ea6\", \"ignore_naming_rule\": "  \
  "true}, {\"name\": \"relative_velocity_sigma\", "                            \
  "\"type\": " VELOCITYCOM_DATAINFO                                            \
  ", \"description\": "                                                        \
  "\"\u7d76\u5bfe\u901f\u5ea6\u306e\u6a19\u6e96\u504f\u5dee\", "               \
  "\"ignore_naming_rule\": true}, {\"name\": \"abs_velocity\", "               \
  "\"type\": " VELOCITYCOM_DATAINFO                                            \
  ", \"description\": \"\u76f8\u5bfe\u901f\u5ea6\", \"ignore_naming_rule\": "  \
  "true}, {\"name\": \"abs_velocity_sigma\", \"type\": " VELOCITYCOM_DATAINFO  \
  ", \"description\": "                                                        \
  "\"\u76f8\u5bfe\u901f\u5ea6\u306e\u6a19\u6e96\u504f\u5dee\", "               \
  "\"ignore_naming_rule\": true}, {\"name\": \"index_closest_point\", "        \
  "\"type\": \"uint32_t\", \"description\": "                                  \
  "\"\u8f2a\u90ed\u70b9\u306e\u70b9\u6570\", \"ignore_naming_rule\": true}, "  \
  "{\"name\": \"ref_point_location\", \"type\": \"uint16_t\", "                \
  "\"description\": \"\u53c2\u7167\u70b9\u306e\u4f4d\u7f6e\", "                \
  "\"ignore_naming_rule\": true}, {\"name\": \"ref_point_coordinate\", "       \
  "\"type\": " POINT2D_DATAINFO                                                \
  ", \"description\": "                                                        \
  "\"\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u3055\u308c\u305f\u30aa\u30d6\u30b8" \
  "\u30a7\u30af\u30c8\u306e\u57fa\u6e96\u70b9\", \"ignore_naming_rule\": "     \
  "true}, {\"name\": \"ref_point_sigma\", \"type\": " POINT2D_DATAINFO         \
  ", \"description\": "                                                        \
  "\"\u63a8\u5b9a\u3055\u308c\u305f\u57fa\u6e96\u70b9\u4f4d\u7f6e\u306e\u6a19" \
  "\u6e96\u504f\u5dee\", \"ignore_naming_rule\": true}, {\"name\": "           \
  "\"ref_point_pos_correction\", \"type\": \"double\", \"description\": "      \
  "\"\u30d4\u30a2\u30bd\u30f3\u7a4d\u7387\u4fc2\u6570\", "                     \
  "\"ignore_naming_rule\": true}, {\"name\": \"priority\", \"type\": "         \
  "\"uint32_t\", \"description\": "                                            \
  "\"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u512a\u5148\u9806\u4f4d\", "   \
  "\"ignore_naming_rule\": true}, {\"name\": \"existence_measurement\", "      \
  "\"type\": \"double\", \"description\": "                                    \
  "\"\u5b58\u5728\u8a08\u6e2c\u5024\", \"ignore_naming_rule\": true}, "        \
  "{\"name\": \"contours\", \"type\": " POINT2D_DATAINFO                       \
  ", \"dimension\": [1000], \"description\": \"\u8f2a\u90ed\u70b9\", "         \
  "\"ignore_naming_rule\": true}], \"ignore_naming_rule\": true, \"ads\": "    \
  "false, \"name_snake_case\": \"obstacle\"}"

#ifdef __cplusplus
extern "C" {
#endif

// Obstacle.hで定義されている型をシリアライズした時のバイト数
#define OBSTACLE_SERIALIZED_SIZE                                               \
  (4 + 2 + 2 + 4 + 4 + 4 + 4 + POINT2D_SERIALIZED_SIZE +                       \
   BOXSIZE_SERIALIZED_SIZE + POINT2D_SERIALIZED_SIZE +                         \
   POINT2D_SERIALIZED_SIZE + BOXSIZE_SERIALIZED_SIZE + 8 +                     \
   VELOCITYCOM_SERIALIZED_SIZE + VELOCITYCOM_SERIALIZED_SIZE +                 \
   VELOCITYCOM_SERIALIZED_SIZE + VELOCITYCOM_SERIALIZED_SIZE + 4 + 2 +         \
   POINT2D_SERIALIZED_SIZE + POINT2D_SERIALIZED_SIZE + 8 + 4 + 8 +             \
   POINT2D_SERIALIZED_SIZE * (1000))

// 定数の定義
#define OBSTACLE_CONTOURS_DIM1 ((size_t)1000)

/* LUXECUから送られてくる物標データ */
typedef struct {
  uint32_t id;                     /* ID */
  uint16_t flags;                  /* オブジェクトflag */
  uint16_t age;                    /* 計測回数 */
  uint32_t hidden_age;             /* lost後の回数 */
  uint32_t classification;         /* 分類 */
  uint32_t class_certainty;        /* 分類信頼度 */
  uint32_t class_age;              /* その分類であった回数 */
  Point2D bound_box_center;        /* 境界boxの中心 */
  BoxSize bound_box_size;          /* 境界boxのサイズ */
  Point2D object_box_center;       /* 障害物boxの中心 */
  Point2D object_box_center_sigma; /* 障害物boxの中心の標準偏差 */
  BoxSize object_box_size;         /* 障害物boxのサイズ */
  double yaw;                      /* yaw角 */
  VelocityCom relative_velocity;   /* 絶対速度 */
  VelocityCom relative_velocity_sigma; /* 絶対速度の標準偏差 */
  VelocityCom abs_velocity;            /* 相対速度 */
  VelocityCom abs_velocity_sigma;      /* 相対速度の標準偏差 */
  uint32_t index_closest_point;        /* 輪郭点の点数 */
  uint16_t ref_point_location;         /* 参照点の位置 */
  Point2D ref_point_coordinate; /* トラッキングされたオブジェクトの基準点 */
  Point2D ref_point_sigma; /* 推定された基準点位置の標準偏差 */
  double ref_point_pos_correction; /* ピアソン積率係数 */
  uint32_t priority;               /* オブジェクトの優先順位 */
  double existence_measurement;    /* 存在計測値 */
  Point2D contours[1000];          /* 輪郭点 */
} Obstacle;

size_t SerializeObstacle(void *buffer, Obstacle *data, size_t max_buffer_size);
size_t DeserializeObstacle(Obstacle *data, void *buffer);
size_t SerializeObstacleAutoRelease(void *buffer, void *data,
                                    size_t max_buffer_size);
size_t DeserializeObstacleForDumper(void *data, void *buffer);
bool IsEqualObstacle(Obstacle *data1, Obstacle *data2);
void InitializeObstacle(Obstacle *data);
void InitializeDefaultOnlyObstacle(Obstacle *data);

#ifdef __cplusplus
}
#endif

#endif // DATA_DEFINITION_OBSTACLE_H
