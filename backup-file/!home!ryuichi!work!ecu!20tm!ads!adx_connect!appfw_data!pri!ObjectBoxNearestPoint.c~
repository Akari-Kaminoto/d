#include "ObjectBoxNearestPoint.h"
#include "data_ptr.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static inline size_t Serializechar(void *buffer, char *data,
                                   size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_CHAR > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_CHAR);

  return APPFW_PRIMITIVE_SIZE_CHAR;
}

static inline size_t Serializebool(void *buffer, bool *data,
                                   size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_BOOL > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  uint8_t tmp = (*data == true) ? 1 : 0;
  memcpy(buffer, &tmp, APPFW_PRIMITIVE_SIZE_BOOL);

  return APPFW_PRIMITIVE_SIZE_BOOL;
}

static inline size_t Serializeint8_t(void *buffer, int8_t *data,
                                     size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT8_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT8_T);

  return APPFW_PRIMITIVE_SIZE_INT8_T;
}

static inline size_t Serializeint16_t(void *buffer, int16_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT16_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT16_T);

  return APPFW_PRIMITIVE_SIZE_INT16_T;
}

static inline size_t Serializeint32_t(void *buffer, int32_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT32_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT32_T);

  return APPFW_PRIMITIVE_SIZE_INT32_T;
}

static inline size_t Serializeint64_t(void *buffer, int64_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT64_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT64_T);

  return APPFW_PRIMITIVE_SIZE_INT64_T;
}

static inline size_t Serializeuint8_t(void *buffer, uint8_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT8_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT8_T);

  return APPFW_PRIMITIVE_SIZE_UINT8_T;
}

static inline size_t Serializeuint16_t(void *buffer, uint16_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT16_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT16_T);

  return APPFW_PRIMITIVE_SIZE_UINT16_T;
}

static inline size_t Serializeuint32_t(void *buffer, uint32_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT32_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT32_T);

  return APPFW_PRIMITIVE_SIZE_UINT32_T;
}

static inline size_t Serializeuint64_t(void *buffer, uint64_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT64_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT64_T);

  return APPFW_PRIMITIVE_SIZE_UINT64_T;
}

static inline size_t Serializefloat(void *buffer, float *data,
                                    size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_FLOAT > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_FLOAT);

  return APPFW_PRIMITIVE_SIZE_FLOAT;
}

static inline size_t Serializedouble(void *buffer, double *data,
                                     size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_DOUBLE > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_DOUBLE);

  return APPFW_PRIMITIVE_SIZE_DOUBLE;
}

static inline size_t Deserializechar(char *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_CHAR);

  return APPFW_PRIMITIVE_SIZE_CHAR;
}

static inline size_t Deserializebool(bool *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  uint8_t tmp;
  memcpy(&tmp, buffer, APPFW_PRIMITIVE_SIZE_BOOL);
  *data = (tmp != 0) ? true : false;

  return APPFW_PRIMITIVE_SIZE_BOOL;
}

static inline size_t Deserializeint8_t(int8_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT8_T);

  return APPFW_PRIMITIVE_SIZE_INT8_T;
}

static inline size_t Deserializeint16_t(int16_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT16_T);

  return APPFW_PRIMITIVE_SIZE_INT16_T;
}

static inline size_t Deserializeint32_t(int32_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT32_T);

  return APPFW_PRIMITIVE_SIZE_INT32_T;
}

static inline size_t Deserializeint64_t(int64_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT64_T);

  return APPFW_PRIMITIVE_SIZE_INT64_T;
}

static inline size_t Deserializeuint8_t(uint8_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT8_T);

  return APPFW_PRIMITIVE_SIZE_UINT8_T;
}

static inline size_t Deserializeuint16_t(uint16_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT16_T);

  return APPFW_PRIMITIVE_SIZE_UINT16_T;
}

static inline size_t Deserializeuint32_t(uint32_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT32_T);

  return APPFW_PRIMITIVE_SIZE_UINT32_T;
}

static inline size_t Deserializeuint64_t(uint64_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT64_T);

  return APPFW_PRIMITIVE_SIZE_UINT64_T;
}

static inline size_t Deserializefloat(float *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_FLOAT);

  return APPFW_PRIMITIVE_SIZE_FLOAT;
}

static inline size_t Deserializedouble(double *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_DOUBLE);

  return APPFW_PRIMITIVE_SIZE_DOUBLE;
}

static inline bool IsEqualchar(char *data1, char *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualbool(bool *data1, bool *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint8_t(int8_t *data1, int8_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint16_t(int16_t *data1, int16_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint32_t(int32_t *data1, int32_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint64_t(int64_t *data1, int64_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint8_t(uint8_t *data1, uint8_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint16_t(uint16_t *data1, uint16_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint32_t(uint32_t *data1, uint32_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint64_t(uint64_t *data1, uint64_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualfloat(float *data1, float *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualdouble(double *data1, double *data2) {
  return *data1 == *data2 ? true : false;
}

size_t SerializeObjectBoxNearestPoint(void *buffer, ObjectBoxNearestPoint *data,
                                      size_t max_buffer_size) {
  char *buffer_to_write = (char *)buffer;
  size_t data_size = 0;
  size_t check_data_size = 0;

  if (data == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->nx),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->ny),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  return data_size;
}

size_t SerializeObjectBoxNearestPointAutoRelease(void *buffer, void *data,
                                                 size_t max_buffer_size) {
  size_t ss = SerializeObjectBoxNearestPoint(
      buffer, (ObjectBoxNearestPoint *)data, max_buffer_size);
  DataPtr_Release(data);
  return ss;
}

size_t DeserializeObjectBoxNearestPoint(ObjectBoxNearestPoint *data,
                                        void *buffer) {
  char *buffer_to_read = (char *)buffer;
  size_t data_size = 0;
  size_t check_data_size = 0;

  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  check_data_size = Deserializefloat((float *)&(data->nx), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->ny), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  return data_size;
}

size_t DeserializeObjectBoxNearestPointForDumper(void *data, void *buffer) {
  size_t ss =
      DeserializeObjectBoxNearestPoint((ObjectBoxNearestPoint *)data, buffer);
  size_t ret = sizeof(ObjectBoxNearestPoint);
  if (ss != OBJECTBOXNEARESTPOINT_SERIALIZED_SIZE) {
    ret = 0;
  }

  return ret;
}

bool IsEqualObjectBoxNearestPoint(ObjectBoxNearestPoint *data1,
                                  ObjectBoxNearestPoint *data2) {
  bool retval = true;
  retval = IsEqualfloat(&data1->nx, &data2->nx);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->ny, &data2->ny);
  if (!retval) {
    return false;
  }

  return true;
}

// イニシャライザの実装
void InitializeObjectBoxNearestPoint(ObjectBoxNearestPoint *data) {
  memset(data, 0, sizeof(ObjectBoxNearestPoint));
  InitializeDefaultOnlyObjectBoxNearestPoint(data);
}

// データ定義書で指定されたデフォルト値のみ初期化するイニシャライザの実装
void InitializeDefaultOnlyObjectBoxNearestPoint(ObjectBoxNearestPoint *data) {}