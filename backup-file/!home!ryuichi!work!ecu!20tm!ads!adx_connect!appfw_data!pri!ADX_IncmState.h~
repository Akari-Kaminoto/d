#ifndef DATA_DEFINITION_ADX_INCMSTATE_H
#define DATA_DEFINITION_ADX_INCMSTATE_H

#include "ADX_LaneRecognitionUnstable.h"
#include "ADX_ObjectRecognitionFailure.h"
#include "ADX_WashingRequest.h"
#include "CarState.h"
#include "appfw.h"
#include "system_constants.h"
#include <stddef.h>

#define ADX_INCMSTATE_DATAINFO                                                 \
  "{\"name\": \"ADX_IncmState\", \"description\": "                            \
  "\"\u30ab\u30e1\u30e9\u72b6\u614b\u60c5\u5831 "                              \
  "(\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc)\", \"members\": [{\"name\": "        \
  "\"adx_incm_car_state\", \"type\": " CARSTATE_DATAINFO                       \
  ", \"description\": \"\u81ea\u8eca\u4f4d\u7f6e\u60c5\u5831\", "              \
  "\"ignore_naming_rule\": true}, {\"name\": \"adx_incm_failure_flag\", "      \
  "\"type\": \"uint32_t\", \"description\": "                                  \
  "\"ADX\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc\u30ab\u30e1\u30e9\u6545\u969c"    \
  "\u30d5\u30e9\u30b0\", \"min\": 0, \"max\": 4294967295, \"lsb\": 1, "        \
  "\"default\": \"0\", \"ignore_naming_rule\": true}, {\"name\": "             \
  "\"adx_incm_unstable_flag\", \"type\": \"uint32_t\", \"description\": "      \
  "\"ADX\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc\u30ab\u30e1\u30e9\u4e0d\u8abf"    \
  "\u30d5\u30e9\u30b0\", \"min\": 0, \"max\": 4294967295, \"lsb\": 1, "        \
  "\"default\": \"0\", \"ignore_naming_rule\": true}, {\"name\": "             \
  "\"adx_incm_object_failure\", "                                              \
  "\"type\": " ADX_OBJECTRECOGNITIONFAILURE_DATAINFO                           \
  ", \"description\": "                                                        \
  "\"ADX\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc\u30ab\u30e1\u30e9\u7269\u6a19"    \
  "\u8a8d\u8b58\u4e0d\u8abf\u8981\u56e0\", \"ignore_naming_rule\": true}, "    \
  "{\"name\": \"adx_incm_lane_unstable\", "                                    \
  "\"type\": " ADX_LANERECOGNITIONUNSTABLE_DATAINFO                            \
  ", \"description\": "                                                        \
  "\"ADX\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc\u30ab\u30e1\u30e9\u30ec\u30fc"    \
  "\u30f3\u8a8d\u8b58\u4e0d\u8abf\u8981\u56e0\", \"ignore_naming_rule\": "     \
  "true}, {\"name\": \"adx_incm_washing_request\", "                           \
  "\"type\": " ADX_WASHINGREQUEST_DATAINFO                                     \
  ", \"description\": "                                                        \
  "\"ADX\u96fb\u5b50\u30a4\u30f3\u30ca\u30fc\u30ab\u30e1\u30e9\u6d17\u6d44"    \
  "\u8981\u6c42\", \"ignore_naming_rule\": true}], \"ignore_naming_rule\": "   \
  "true, \"ads\": false, \"name_snake_case\": \"adx_incm_state\"}"

#ifdef __cplusplus
extern "C" {
#endif

// ADX_IncmState.hで定義されている型をシリアライズした時のバイト数
#define ADX_INCMSTATE_SERIALIZED_SIZE                                          \
  (CARSTATE_SERIALIZED_SIZE + 4 + 4 +                                          \
   ADX_OBJECTRECOGNITIONFAILURE_SERIALIZED_SIZE +                              \
   ADX_LANERECOGNITIONUNSTABLE_SERIALIZED_SIZE +                               \
   ADX_WASHINGREQUEST_SERIALIZED_SIZE)

// 定数の定義
#define ADX_INCM_STATE_ADX_INCM_FAILURE_FLAG_MIN ((uint32_t)0)
#define ADX_INCM_STATE_ADX_INCM_FAILURE_FLAG_MAX ((uint32_t)4294967295)
#define ADX_INCM_STATE_ADX_INCM_UNSTABLE_FLAG_MIN ((uint32_t)0)
#define ADX_INCM_STATE_ADX_INCM_UNSTABLE_FLAG_MAX ((uint32_t)4294967295)

/* カメラ状態情報 (電子インナー) */
typedef struct {
  CarState adx_incm_car_state; /* 自車位置情報 */
  uint32_t adx_incm_failure_flag; /* ADX電子インナーカメラ故障フラグ */
  uint32_t adx_incm_unstable_flag; /* ADX電子インナーカメラ不調フラグ */
  ADX_ObjectRecognitionFailure
      adx_incm_object_failure; /* ADX電子インナーカメラ物標認識不調要因 */
  ADX_LaneRecognitionUnstable
      adx_incm_lane_unstable; /* ADX電子インナーカメラレーン認識不調要因 */
  ADX_WashingRequest
      adx_incm_washing_request; /* ADX電子インナーカメラ洗浄要求 */
} ADX_IncmState;

size_t SerializeADX_IncmState(void *buffer, ADX_IncmState *data,
                              size_t max_buffer_size);
size_t SerializeADX_IncmStateAutoRelease(void *buffer, void *data,
                                         size_t max_buffer_size);
size_t DeserializeADX_IncmState(ADX_IncmState *data, void *buffer);
bool IsEqualADX_IncmState(ADX_IncmState *data1, ADX_IncmState *data2);
void InitializeADX_IncmState(ADX_IncmState *data);
void InitializeDefaultOnlyADX_IncmState(ADX_IncmState *data);

#ifdef __cplusplus
}
#endif

#endif // DATA_DEFINITION_ADX_INCMSTATE_H
