#ifndef DATA_DEFINITION_INFO_H
#define DATA_DEFINITION_INFO_H

#include "NoiseInfo.h"
#include "Pose3D.h"
#include "appfw.h"
#include "system_constants.h"
#include <stddef.h>

#define INFO_DATAINFO                                                          \
  "{\"name\": \"Info\", \"description\": \"\u60c5\u5831\", \"members\": "      \
  "[{\"name\": \"calib_pose\", \"type\": " POSE3D_DATAINFO                     \
  ", \"description\": \"Pose3D\", \"ignore_naming_rule\": true}, {\"name\": "  \
  "\"nb_samples\", \"type\": \"uint32_t\", \"description\": \"nb samples per " \
  "scan and per layer\", \"ignore_naming_rule\": true}, {\"name\": "           \
  "\"start_angle\", \"type\": \"float\", \"description\": \"layer 0 view "     \
  "angle in radians\", \"ignore_naming_rule\": true}, {\"name\": "             \
  "\"end_angle\", \"type\": \"float\", \"description\": \"layer 0 view angle " \
  "in radians\", \"ignore_naming_rule\": true}, {\"name\": \"vert_fov\", "     \
  "\"type\": \"float\", \"description\": \"vertical field of view\", "         \
  "\"ignore_naming_rule\": true}, {\"name\": \"sampling\", \"type\": "         \
  "\"float\", \"description\": \"distance resolution\", "                      \
  "\"ignore_naming_rule\": true}, {\"name\": \"period\", \"type\": "           \
  "\"int32_t\", \"description\": \"output period in ms\", "                    \
  "\"ignore_naming_rule\": true}, {\"name\": \"noiseInfo\", "                  \
  "\"type\": " NOISEINFO_DATAINFO                                              \
  ", \"description\": \"noise information\", \"ignore_naming_rule\": true}, "  \
  "{\"name\": \"mindist\", \"type\": \"float\", \"description\": \"device "    \
  "range in m\", \"ignore_naming_rule\": true}, {\"name\": \"maxdist\", "      \
  "\"type\": \"float\", \"description\": \"device range in m\", "              \
  "\"ignore_naming_rule\": true}, {\"name\": \"device_type\", \"type\": "      \
  "\"uint8_t\", \"description\": \"device type\", \"ignore_naming_rule\": "    \
  "true}, {\"name\": \"nbLayers\", \"type\": \"uint8_t\", \"description\": "   \
  "\"nb layer\", \"ignore_naming_rule\": true}, {\"name\": \"is_corrected\", " \
  "\"type\": \"uint8_t\", \"description\": \"true if distortion correction "   \
  "done by ECU\", \"ignore_naming_rule\": true}, {\"name\": \"device_id\", "   \
  "\"type\": \"int8_t\", \"description\": \"headID\", "                        \
  "\"ignore_naming_rule\": true}, {\"name\": \"scan_freq\", \"type\": "        \
  "\"float\", \"description\": \"Scan frequency of this scanner in Hz\", "     \
  "\"ignore_naming_rule\": true}, {\"name\": \"mounting_position\", "          \
  "\"type\": \"int32_t\", \"description\": \"mounting position of lux "        \
  "sensor\", \"ignore_naming_rule\": true}], \"ignore_naming_rule\": true, "   \
  "\"ads\": false, \"name_snake_case\": \"info\"}"

#ifdef __cplusplus
extern "C" {
#endif

// Info.hで定義されている型をシリアライズした時のバイト数
#define INFO_SERIALIZED_SIZE                                                   \
  (POSE3D_SERIALIZED_SIZE + 4 + 4 + 4 + 4 + 4 + 4 +                            \
   NOISEINFO_SERIALIZED_SIZE + 4 + 4 + 1 + 1 + 1 + 1 + 4 + 4)

// 定数の定義

/* 情報 */
typedef struct {
  Pose3D calib_pose;         /* Pose3D */
  uint32_t nb_samples;       /* nb samples per scan and per layer */
  float start_angle;         /* layer 0 view angle in radians */
  float end_angle;           /* layer 0 view angle in radians */
  float vert_fov;            /* vertical field of view */
  float sampling;            /* distance resolution */
  int32_t period;            /* output period in ms */
  NoiseInfo noiseInfo;       /* noise information */
  float mindist;             /* device range in m */
  float maxdist;             /* device range in m */
  uint8_t device_type;       /* device type */
  uint8_t nbLayers;          /* nb layer */
  uint8_t is_corrected;      /* true if distortion correction done by ECU */
  int8_t device_id;          /* headID */
  float scan_freq;           /* Scan frequency of this scanner in Hz */
  int32_t mounting_position; /* mounting position of lux sensor */
} Info;

size_t SerializeInfo(void *buffer, Info *data, size_t max_buffer_size);
size_t SerializeInfoAutoRelease(void *buffer, void *data,
                                size_t max_buffer_size);
size_t DeserializeInfo(Info *data, void *buffer);
bool IsEqualInfo(Info *data1, Info *data2);
void InitializeInfo(Info *data);
void InitializeDefaultOnlyInfo(Info *data);

#ifdef __cplusplus
}
#endif

#endif // DATA_DEFINITION_INFO_H
