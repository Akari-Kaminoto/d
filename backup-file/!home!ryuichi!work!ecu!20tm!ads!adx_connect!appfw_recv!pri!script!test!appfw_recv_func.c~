/****************************************************************************/
/* ファイル名	: appfw_recv_func.c											*/
/*--------------------------------------------------------------------------*/
/* モジュール名	: appfw_recv 											*/
/*--------------------------------------------------------------------------*/
/* 機能			: 機能呼び出し												*/
/*--------------------------------------------------------------------------*/
/* 備考			:															*/
/*--------------------------------------------------------------------------*/
/****************************************************************************/
/*	  Include																*/
/****************************************************************************/
#undef __STRICT_ANSI__
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <inttypes.h>
#include <sils/common/type_sils.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <errno.h>
#include <poll.h>

#include <dif/common/dif_struct_common.h>
#include "../../appfw_data/pub/appfw_data.h"
#include "../pub/appfw_recv_func.h"
#include "appfw_recv_crc32.h"
#include <sils/mng/schdl_config.h>

/****************************************************************************/
/*					スタティック関数宣言									*/
/****************************************************************************/
#define APPFW_RECV_PORT 15010

#define HEADER_DELIMITER 0xffffffff
#define HEADER_SIZE  12
#define ACCEPT_TIMEOUT 10 //sec
#define RECEIVE_TIMEOUT 10 //sec
#define ACCEPT_TIMEOUT_MS (ACCEPT_TIMEOUT*1000) //msec
#define RECEIVE_TIMEOUT_MS (RECEIVE_TIMEOUT*1000) //msec

#define MIN(a, b) ((a)<(b)?(a):(b))
#define MAX(a, b) ((a)>(b)?(a):(b))

static int sock = -1;
static int sock_accept = -1;
static bool sock_connected = false;
static uint8_t *temp_recv_buf=NULL;
static uint8_t *temp_serialize_buf = NULL;
static size_t max_buf_size = 0;

typedef union {
  /**BUFFER_SIZE_LIST_START**/
  char m0[ADXDIGSMINFO_SERIALIZED_SIZE];
  char m1[ADXDIGSMSTATUS_SERIALIZED_SIZE];
  char m2[ADXINCMOBJINFO_SERIALIZED_SIZE];
  char m3[ADXLCMOBJINFO_SERIALIZED_SIZE];
  char m4[ADXLOCSMSTATUS_SERIALIZED_SIZE];
  char m5[ADXROADMARKINGATTRIBUTE_SERIALIZED_SIZE];
  char m6[ADXTPCMOBJINFO_SERIALIZED_SIZE];
  char m7[ADX_APPSTATEAIPLN_SERIALIZED_SIZE];
  char m8[ADX_APPSTATEDLRCG_SERIALIZED_SIZE];
  char m9[ADX_APPSTATELANEPOE_SERIALIZED_SIZE];
  char m10[ADX_APPSTATEMAP_SERIALIZED_SIZE];
  char m11[ADX_APPSTATERESOURSEMANAGER_SERIALIZED_SIZE];
  char m12[ADX_APPSTETEDATAUPLOADER_SERIALIZED_SIZE];
  char m13[ADX_DIAGSTATE_SERIALIZED_SIZE];
  char m14[ADX_ET_SERIALIZED_SIZE];
  char m15[ADX_GRIDMAPLCM_SERIALIZED_SIZE];
  char m16[ADX_GRIDMAPTPCM_SERIALIZED_SIZE];
  char m17[ADX_INCMOBJECTDATA_SERIALIZED_SIZE];
  char m18[ADX_INCMSTATE_SERIALIZED_SIZE];
  char m19[ADX_LCMOBJECTDATA_SERIALIZED_SIZE];
  char m20[ADX_LCMSTATE_SERIALIZED_SIZE];
  char m21[ADX_SIGNDATA_SERIALIZED_SIZE];
  char m22[ADX_TPCMOBJECTDATA_SERIALIZED_SIZE];
  char m23[ADX_TPCMSTATE_SERIALIZED_SIZE];
  char m24[ADX_TRAFFICLIGHTDATA_SERIALIZED_SIZE];
  char m25[TELESIGNDATA_SERIALIZED_SIZE];
  char m26[TELELINEDATA_SERIALIZED_SIZE];
  char m27[EINNERLINEDATA_SERIALIZED_SIZE];
  char m28[ADX_FRLIDAROBJDATAINCGENERALPATH_SERIALIZED_SIZE];
  char m29[ADX_INCMOBJECTDATA_INT_SERIALIZED_SIZE];
  char m30[ADX_LCMOBJECTDATA_INT_SERIALIZED_SIZE];
  char m31[ADX_POLARMAPLCM_SERIALIZED_SIZE];
  char m32[ADX_POLARMAPTPCM_SERIALIZED_SIZE];
  char m33[ADX_RECOGNITIONSENSORSTATE_SERIALIZED_SIZE];
  char m34[ADX_RECOGNITIONSENSORSTATEFAILURE_SERIALIZED_SIZE];
  char m35[ADX_TPCMOBJECTDATA_INT_SERIALIZED_SIZE];
  char m36[ADXLANEDATAARRAY_SERIALIZED_SIZE];
  char m37[ADXLANEBOUNDARYDATAARRAY_SERIALIZED_SIZE];
  char m38[ADX_ECUPLANNEROUTPUTRESULT_SERIALIZED_SIZE];
  char m39[DLRLIDARSTATUSINFO_SERIALIZED_SIZE];
  char m40[DLRLIDARSTATUSINFO_SERIALIZED_SIZE];
  char m41[DLRLIDARSTATUSINFO_SERIALIZED_SIZE];
  char m42[DLRLIDARSTATUSINFO_SERIALIZED_SIZE];
  char m43[ADX_LCMSTATE_SERIALIZED_SIZE];
  char m44[ADX_TPCMSTATE_SERIALIZED_SIZE];
  char m45[ADX_INCMSTATE_SERIALIZED_SIZE];
  char m46[DLRSMSTATUSINFO_SERIALIZED_SIZE];
  /**BUFFER_SIZE_LIST_END**/
} BufferSizeList;

typedef size_t (*deserialize_func_ptr)(void *data, void *buffer);
typedef struct{
  uint32_t data_label;
  void *output_buffer;
  deserialize_func_ptr des_func;
  uint32_t serialized_size;
} DataInfo;

typedef size_t (*serialize_func_ptr)(void *buffer, const void *data, size_t max_buffer_size);
static void PrintCrc32(void *data, serialize_func_ptr func, uint32_t data_label);


/****************************************************************************/
/* 関数名		:	fn_appfw_recv_init								*/
/*--------------------------------------------------------------------------*/
/* 機能			:	appfw_recv_init										*/
/*--------------------------------------------------------------------------*/
/* 引数			: なし														*/
/*--------------------------------------------------------------------------*/
/* 戻り値		: なし														*/
/****************************************************************************/
VD	fn_appfw_recv_init(VD)
{
  LINUX_PRINT_OUT("%s:%d start-------------\n", __FUNCTION__, __LINE__);

  struct sockaddr_in addr;

  //socket初期化
  sock = socket(AF_INET, SOCK_STREAM, 0);
  if (sock < 0) {
    Slog_Error("socket failed.");
    return;
  }
  int yes = 1;
  setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const char *)&yes, sizeof(yes));

  //port初期化
  addr.sin_family = AF_INET;
  addr.sin_port = htons(APPFW_RECV_PORT);
  addr.sin_addr.s_addr = INADDR_ANY;
  if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) != 0) {
    Slog_Error("bind error.");
    return;
  }
  if (listen(sock, 1) != 0) {
    Slog_Error("listen error.");
    return;
  }

  max_buf_size = sizeof(BufferSizeList);

  //シリアライズサイズメモリ確保
  temp_recv_buf = malloc(max_buf_size);

  //crc32初期化
  fpmw_recv_crc32_init();

  LINUX_PRINT_OUT("%s:%d end-------------\n", __FUNCTION__, __LINE__);
	return;
}

/****************************************************************************/
/* 関数名		:	fn_appfw_recv_compute							*/
/*--------------------------------------------------------------------------*/
/* 機能			:	fn_appfw_recv_compute											*/
/*--------------------------------------------------------------------------*/
/* 引数			: なし														*/
/*--------------------------------------------------------------------------*/
/* 戻り値		: なし														*/
/****************************************************************************/
VD	fn_appfw_recv_compute(
  /**COMPUTE_ARGS_START**/
  ADXDigsmInfo * send_adx_digsm_info,
  ADXDigsmStatus * send_adx_digsm_status,
  ADXIncmObjInfo * send_adx_incm_obj_info,
  ADXLcmObjInfo * send_adx_lcm_obj_info,
  ADXLocSmStatus * send_adx_loc_sm_status,
  ADXRoadMarkingAttribute * send_adx_road_marking_attribute,
  ADXTpcmObjInfo * send_adx_tpcm_obj_info,
  ADX_AppStateAIPln * send_adx_app_state_ai_pln,
  ADX_AppStateDLrcg * send_adx_app_state_dl_rcg,
  ADX_AppStateLanePOE * send_adx_app_state_lane_poe,
  ADX_AppStateMap * send_adx_app_state_map,
  ADX_AppStateResourseManager * send_adx_app_state_resource_manager,
  ADX_AppSteteDataUploader * send_adx_app_state_data_uploader,
  ADX_DiagState * send_adx_diag_state,
  ADX_ET * send_adx_et,
  ADX_GridmapLcm * send_adx_gridmap_lcm,
  ADX_GridmapTpcm * send_adx_gridmap_tpcm,
  ADX_IncmObjectData * send_adx_incm_object_data,
  ADX_IncmState * send_adx_incm_state,
  ADX_LcmObjectData * send_adx_lcm_object_data,
  ADX_LcmState * send_adx_lcm_state,
  ADX_SignData * send_adx_sign_data,
  ADX_TpcmObjectData * send_adx_tpcm_object_data,
  ADX_TpcmState * send_adx_tpcm_state,
  ADX_TrafficLightData * send_adx_traffic_light_data,
  TeleSignData * LOC_52_03_tele_sign_data,
  TeleLineData * LOC_52_02_tele_line_data,
  EInnerLineData * send_einner_line_data,
  ADX_FrLidarObjDataIncGeneralPath * send_adx_fr_lidar_obj_data_inc_general_path,
  ADX_IncmObjectData_Int * adx_incm_objectdata_int,
  ADX_LcmObjectData_Int * adx_lcm_objectdata_int,
  ADX_PolarmapLcm * send_adx_polarmap_lcm,
  ADX_PolarmapTpcm * send_adx_polarmap_tpcm,
  ADX_RecognitionSensorState * adx_recognition_sensor_state,
  ADX_RecognitionSensorStateFailure * send_adx_recognition_sensor_state_failure,
  ADX_TpcmObjectData_Int * adx_tpcm_objectdata_int,
  ADXLaneDataArray * send_adx_lane_data_array,
  ADXLaneBoundaryDataArray * send_adx_lane_boundary_data_array,
  ADX_EcuPlannerOutputResult * send_adx_ecu_pl_output_result,
  DlrLidarStatusInfo * dlr_frlidar_status_info,
  DlrLidarStatusInfo * dlr_rrlidar_status_info,
  DlrLidarStatusInfo * dlr_ltlidar_status_info,
  DlrLidarStatusInfo * dlr_rtlidar_status_info,
  ADX_LcmState * adx_dlr_lcm_state,
  ADX_TpcmState * adx_dlr_tpcm_state,
  ADX_IncmState * adx_dlr_incm_state,
  DlrsmStatusInfo * dlr_sm_status_info
  /**COMPUTE_ARGS_END**/
)
{
  LINUX_PRINT_OUT("%s:%d start-------------\n", __FUNCTION__, __LINE__);

  size_t i;

  DataInfo data_info_list[] = {
    /**DATA_INFO_LIST_START**/
    {kIoDataLabelADXDigsmInfo, (void*)send_adx_digsm_info, (serialize_func_ptr)&SerializeADXDigsmInfo},
    {kIoDataLabelADXDigsmStatus, (void*)send_adx_digsm_status, (serialize_func_ptr)&SerializeADXDigsmStatus},
    {kIoDataLabelADXIncmObjInfo, (void*)send_adx_incm_obj_info, (serialize_func_ptr)&SerializeADXIncmObjInfo},
    {kIoDataLabelADXLcmObjInfo, (void*)send_adx_lcm_obj_info, (serialize_func_ptr)&SerializeADXLcmObjInfo},
    {kIoDataLabelADXLocSmStatus, (void*)send_adx_loc_sm_status, (serialize_func_ptr)&SerializeADXLocSmStatus},
    {kIoDataLabelADXRoadMarkingAttribute, (void*)send_adx_road_marking_attribute, (serialize_func_ptr)&SerializeADXRoadMarkingAttribute},
    {kIoDataLabelADXTpcmObjInfo, (void*)send_adx_tpcm_obj_info, (serialize_func_ptr)&SerializeADXTpcmObjInfo},
    {kIoDataLabelADX_AppStateAIPln, (void*)send_adx_app_state_ai_pln, (serialize_func_ptr)&SerializeADX_AppStateAIPln},
    {kIoDataLabelADX_AppStateDLrcg, (void*)send_adx_app_state_dl_rcg, (serialize_func_ptr)&SerializeADX_AppStateDLrcg},
    {kIoDataLabelADX_AppStateLanePOE, (void*)send_adx_app_state_lane_poe, (serialize_func_ptr)&SerializeADX_AppStateLanePOE},
    {kIoDataLabelADX_AppStateMap, (void*)send_adx_app_state_map, (serialize_func_ptr)&SerializeADX_AppStateMap},
    {kIoDataLabelADX_AppStateResourseManager, (void*)send_adx_app_state_resource_manager, (serialize_func_ptr)&SerializeADX_AppStateResourseManager},
    {kIoDataLabelADX_AppSteteDataUploader, (void*)send_adx_app_state_data_uploader, (serialize_func_ptr)&SerializeADX_AppSteteDataUploader},
    {kIoDataLabelADX_DiagState, (void*)send_adx_diag_state, (serialize_func_ptr)&SerializeADX_DiagState},
    {kIoDataLabelADX_ET, (void*)send_adx_et, (serialize_func_ptr)&SerializeADX_ET},
    {kIoDataLabelADX_GridmapLcm, (void*)send_adx_gridmap_lcm, (serialize_func_ptr)&SerializeADX_GridmapLcm},
    {kIoDataLabelADX_GridmapTpcm, (void*)send_adx_gridmap_tpcm, (serialize_func_ptr)&SerializeADX_GridmapTpcm},
    {kIoDataLabelADX_IncmObjectData, (void*)send_adx_incm_object_data, (serialize_func_ptr)&SerializeADX_IncmObjectData},
    {kIoDataLabelADX_IncmState, (void*)send_adx_incm_state, (serialize_func_ptr)&SerializeADX_IncmState},
    {kIoDataLabelADX_LcmObjectData, (void*)send_adx_lcm_object_data, (serialize_func_ptr)&SerializeADX_LcmObjectData},
    {kIoDataLabelADX_LcmState, (void*)send_adx_lcm_state, (serialize_func_ptr)&SerializeADX_LcmState},
    {kIoDataLabelADX_SignData, (void*)send_adx_sign_data, (serialize_func_ptr)&SerializeADX_SignData},
    {kIoDataLabelADX_TpcmObjectData, (void*)send_adx_tpcm_object_data, (serialize_func_ptr)&SerializeADX_TpcmObjectData},
    {kIoDataLabelADX_TpcmState, (void*)send_adx_tpcm_state, (serialize_func_ptr)&SerializeADX_TpcmState},
    {kIoDataLabelADX_TrafficLightData, (void*)send_adx_traffic_light_data, (serialize_func_ptr)&SerializeADX_TrafficLightData},
    {kIoDataLabelTeleSignData, (void*)LOC_52_03_tele_sign_data, (serialize_func_ptr)&SerializeTeleSignData},
    {kIoDataLabelTeleLineData, (void*)LOC_52_02_tele_line_data, (serialize_func_ptr)&SerializeTeleLineData},
    {kIoDataLabelEInnerLineData, (void*)send_einner_line_data, (serialize_func_ptr)&SerializeEInnerLineData},
    {kIoDataLabelADX_FrLidarObjDataIncGeneralPath, (void*)send_adx_fr_lidar_obj_data_inc_general_path, (serialize_func_ptr)&SerializeADX_FrLidarObjDataIncGeneralPath},
    {kIoDataLabelADX_IncmObjectData_Int, (void*)adx_incm_objectdata_int, (serialize_func_ptr)&SerializeADX_IncmObjectData_Int},
    {kIoDataLabelADX_LcmObjectData_Int, (void*)adx_lcm_objectdata_int, (serialize_func_ptr)&SerializeADX_LcmObjectData_Int},
    {kIoDataLabelADX_PolarmapLcm, (void*)send_adx_polarmap_lcm, (serialize_func_ptr)&SerializeADX_PolarmapLcm},
    {kIoDataLabelADX_PolarmapTpcm, (void*)send_adx_polarmap_tpcm, (serialize_func_ptr)&SerializeADX_PolarmapTpcm},
    {kIoDataLabelADX_RecognitionSensorState, (void*)adx_recognition_sensor_state, (serialize_func_ptr)&SerializeADX_RecognitionSensorState},
    {kIoDataLabelADX_RecognitionSensorStateFailure, (void*)send_adx_recognition_sensor_state_failure, (serialize_func_ptr)&SerializeADX_RecognitionSensorStateFailure},
    {kIoDataLabelADX_TpcmObjectData_Int, (void*)adx_tpcm_objectdata_int, (serialize_func_ptr)&SerializeADX_TpcmObjectData_Int},
    {kIoDataLabelADXLaneDataArray, (void*)send_adx_lane_data_array, (serialize_func_ptr)&SerializeADXLaneDataArray},
    {kIoDataLabelADXLaneBoundaryDataArray, (void*)send_adx_lane_boundary_data_array, (serialize_func_ptr)&SerializeADXLaneBoundaryDataArray},
    {kIoDataLabelADX_EcuPlannerOutputResult, (void*)send_adx_ecu_pl_output_result, (serialize_func_ptr)&SerializeADX_EcuPlannerOutputResult},
    {kIoDataLabelDlrLidarStatusInfo, (void*)dlr_frlidar_status_info, (serialize_func_ptr)&SerializeDlrLidarStatusInfo},
    {kIoDataLabelDlrLidarStatusInfo2, (void*)dlr_rrlidar_status_info, (serialize_func_ptr)&SerializeDlrLidarStatusInfo},
    {kIoDataLabelDlrLidarStatusInfo3, (void*)dlr_ltlidar_status_info, (serialize_func_ptr)&SerializeDlrLidarStatusInfo},
    {kIoDataLabelDlrLidarStatusInfo4, (void*)dlr_rtlidar_status_info, (serialize_func_ptr)&SerializeDlrLidarStatusInfo},
    {kIoDataLabelADX_LcmState2, (void*)adx_dlr_lcm_state, (serialize_func_ptr)&SerializeADX_LcmState},
    {kIoDataLabelADX_TpcmState2, (void*)adx_dlr_tpcm_state, (serialize_func_ptr)&SerializeADX_TpcmState},
    {kIoDataLabelADX_IncmState2, (void*)adx_dlr_incm_state, (serialize_func_ptr)&SerializeADX_IncmState},
    {kIoDataLabelDlrsmStatusInfo, (void*)dlr_sm_status_info, (serialize_func_ptr)&SerializeDlrsmStatusInfo},
    /**DATA_INFO_LIST_END**/
  };
  size_t data_info_list_count = (size_t)(sizeof(data_info_list)/sizeof(DataInfo));

  //全受信フラグリセット
  for (i=0; i<data_info_list_count; i++) {
    Appfw_MsgUtilSetPubRequest(data_info_list[i].output_buffer, false);
  }
  
  if (sock < 0) {
    Slog_Error("socket error.");
    return;
  }

  //未接続時は接続要求を待つ
  if (sock_connected == false) {
    struct pollfd fds = {0};
    fds.fd = sock;
    fds.events = POLLIN | POLLERR;
    int pret = poll(&fds, 1, ACCEPT_TIMEOUT_MS);
    if (pret < 0 || (fds.revents & POLLIN) == 0) {
      //接続要求待ちタイムアウト or エラー -> retry
      return;
    }

    //接続要求あり
    struct sockaddr_in client;
    socklen_t len = (socklen_t)sizeof(client);
    sock_accept = accept(sock, (struct sockaddr *)&client, (socklen_t*)&len);
    if (sock_accept < 0) {
      Slog_Error("accept error.");
      return;
    }
    sock_connected = true;
    Slog_Info("connected.");
  }

  //受信
  uint32_t header_len_received = 0;
  uint32_t data_len_expect = 0;
  uint32_t data_len_received = 0;
  uint32_t data_label = 0;
  char header_buf[HEADER_SIZE] = {0};

  while(1) {

    struct pollfd fds = {0};
    fds.fd = sock_accept;
    fds.events = POLLIN | POLLERR;
    int pret = poll(&fds, 1, RECEIVE_TIMEOUT_MS);
    if (pret == 0 && (fds.revents & POLLIN) == 0){
      //timeout
      if ((header_len_received>0) || (data_len_received>0)) {
        //メッセージ受信途中のタイムアウトはエラー
        Slog_Error("receiving timeout error");
      }
      return;
    }
    if (pret < 0) {
      if (errno == EINTR) {
        Slog_Debug("poll() EINTR");
        continue;
      }
      Slog_Error("poll: %s", strerror(errno));
      return;
    }

    if (header_len_received < HEADER_SIZE){
      //ヘッダの抽出
      uint32_t len_read = HEADER_SIZE-header_len_received;
      errno = 0;
      int32_t len_result = (int32_t)read(sock_accept, &header_buf[header_len_received], len_read);
      if (len_result == 0) {
        //コネクション切断
        Slog_Info("connection closed. ret:0, %s", strerror(errno));
        sock_connected = false;
        close(sock_accept);
        sock_accept = -1;
        return;
      } else if (len_result < 0) {
        if (errno == EINTR) {
          Slog_Debug("read() EINTR");
          continue;
        }
        //ソケットエラー
        Slog_Info("connection closed. %s", strerror(errno));
        sock_connected = false;
        close(sock_accept);
        sock_accept = -1;
        return;
      }
      header_len_received += (uint32_t)len_result;
      if (header_len_received == HEADER_SIZE) {
        uint32_t delim = (*((uint32_t*)(void*)&header_buf[0]));
        if (delim == HEADER_DELIMITER){
          //ヘッダがそろったらデータ長とIDを取得
          data_label      = (*((uint32_t*)(void*)&header_buf[4]));
          data_len_expect = (*((uint32_t*)(void*)&header_buf[8]));
          //未定義の大きいデータが送信された場合は一旦バッファを拡張（データラベル判定時に破棄する）
          if (max_buf_size < data_len_expect) {
            free(temp_recv_buf);
            max_buf_size = data_len_expect;
            temp_recv_buf = malloc(max_buf_size);
          }
          if (data_len_expect <= 0) {
            //データサイズのエラー
            Slog_Error("data size error.");
            return;
          }
        } else {
          //ヘッダのデリミタ照合エラー
          Slog_Error("unknown header delimiter");
          return;
        }
      }

    } else if (data_len_expect > 0) {
      //データの抽出
      uint32_t len_read = data_len_expect - data_len_received;
      int32_t len_result = (int32_t)read(sock_accept, &temp_recv_buf[data_len_received], len_read);
      if (len_result <= 0) {
        if (errno == EINTR) {
          Slog_Debug("read() EINTR");
          continue;
        }
        //ソケットエラーかデータ受信途中でコネクション切断エラー
        Slog_Error("read error. %s", strerror(errno));
        sock_connected = false;
        close(sock_accept);
        sock_accept = -1;
        return;
      }
      data_len_received += (uint32_t)len_result;
      if (data_len_received == data_len_expect) {
        //１パケット受信完了
        bool found = false;
        for (i=0; i<data_info_list_count; i++) {
          if (data_label == data_info_list[i].data_label) {
            found = true;
            if (data_len_received == data_info_list[i].serialized_size) {
              (data_info_list[i].des_func)(data_info_list[i].output_buffer, (void*)temp_recv_buf);
              // fn_appfw_test_recv_compute()のトリガ呼び出し
              fn_schdl_api_send_trig(CEN_SCHDL_TRIG_APPFW_TEST_RECV_DATA);

              // それともこれ？
              //Appfw_MsgUtilSetPubRequest(data_info_list[i].output_buffer, true);
              
              break;
            } else {
              Slog_Error("incompatible data size. (data label %d)", data_label);
              break;
            }
          }
        }
        if (found == false) {
          Slog_Error("unknown data label (%d)", data_label);
        }
        LINUX_PRINT_OUT("%s:%d end-------------\n", __FUNCTION__, __LINE__);
        return;
      }
    }
  }

  LINUX_PRINT_OUT("%s:%d end-------------\n", __FUNCTION__, __LINE__);
  return;
}

/****************************************************************************/
/* 関数名		:	PrintCrc32							*/
/*--------------------------------------------------------------------------*/
/* 機能			:	ダミーデータ取得											*/
/*--------------------------------------------------------------------------*/
/* 引数			: 略														*/
/*--------------------------------------------------------------------------*/
/* 戻り値		: 略														*/
/****************************************************************************/
static void PrintCrc32(void *data, serialize_func_ptr func, uint32_t data_label)
{
  if (temp_serialize_buf==NULL) {
      temp_serialize_buf = malloc(max_buf_size);
  }
  //serialize -> crc32 -> print
  size_t serialized_size = (func)(temp_serialize_buf, data, max_buf_size);
  uint32_t crc = fpmw_recv_crc32(temp_serialize_buf, serialized_size);
  printf("dataid:%"PRIu32" crc32:0x%08"PRIx32"\n", data_label, crc);
}
