#ifndef DATA_DEFINITION_INTERNALSTATE_H
#define DATA_DEFINITION_INTERNALSTATE_H

#include "appfw.h"
#include "system_constants.h"
#include <stddef.h>

#define INTERNALSTATE_DATAINFO                                                 \
  "{\"name\": \"InternalState\", \"description\": "                            \
  "\"\u5185\u90e8\u76e3\u8996\u72b6\u614b\", \"members\": [{\"name\": "        \
  "\"lat_correction_type\", \"type\": \"int8_t\", \"description\": "           \
  "\"\u6a2a\u4f4d\u7f6e\u88dc\u6b63\u60c5\u5831\", \"min\": 0, \"max\": 4, "   \
  "\"ignore_naming_rule\": true}, {\"name\": \"is_matching_fail\", \"type\": " \
  "\"uint8_t\", \"description\": "                                             \
  "\"\u8def\u9762\u7167\u5408\u7570\u5e38\u30d5\u30e9\u30b0\", \"min\": 0, "   \
  "\"max\": 1, \"ignore_naming_rule\": true}, {\"name\": \"is_relp_fail\", "   \
  "\"type\": \"uint8_t\", \"description\": "                                   \
  "\"RELP\u7570\u5e38\u30d5\u30e9\u30b0\", \"min\": 0, \"max\": 1, "           \
  "\"ignore_naming_rule\": true}, {\"name\": \"lateral_error\", \"type\": "    \
  "\"float\", \"unit\": \"m\", \"description\": "                              \
  "\"\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u6a2a\u504f\u5dee\u4fe1\u983c\u5ea6" \
  "\", \"max\": 10, \"ignore_naming_rule\": true}, {\"name\": "                \
  "\"longitudinal_error\", \"type\": \"float\", \"unit\": \"m\", "             \
  "\"description\": "                                                          \
  "\"\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u7e26\u504f\u5dee\u4fe1\u983c\u5ea6" \
  "\", \"max\": 1000, \"ignore_naming_rule\": true}, {\"name\": "              \
  "\"heading_error\", \"type\": \"double\", \"unit\": \"deg\", "               \
  "\"description\": "                                                          \
  "\"\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u65b9\u4f4d\u89d2\u504f\u5dee\u4fe1" \
  "\u983c\u5ea6\", \"max\": 180, \"ignore_naming_rule\": true}, {\"name\": "   \
  "\"kalman_filter_state\", \"type\": \"bool\", \"description\": "             \
  "\"\u30ab\u30eb\u30de\u30f3\u30d5\u30a3\u30eb\u30bf\u52d5\u4f5c\u30d5\u30e9" \
  "\u30b0\", \"min\": 0, \"max\": 1, \"ignore_naming_rule\": true}, "          \
  "{\"name\": \"lane_poe_state\", \"type\": \"uint8_t\", \"description\": "    \
  "\"LanePOE\u52d5\u4f5c\u30d5\u30e9\u30b0\", \"min\": 0, \"max\": 1, "        \
  "\"ignore_naming_rule\": true}], \"ignore_naming_rule\": true, \"ads\": "    \
  "false, \"name_snake_case\": \"internal_state\"}"

#ifdef __cplusplus
extern "C" {
#endif

// InternalState.hで定義されている型をシリアライズした時のバイト数
#define INTERNALSTATE_SERIALIZED_SIZE (1 + 1 + 1 + 4 + 4 + 8 + 1 + 1)

// 定数の定義
#define INTERNAL_STATE_LAT_CORRECTION_TYPE_MIN ((int8_t)0)
#define INTERNAL_STATE_LAT_CORRECTION_TYPE_MAX ((int8_t)4)
#define INTERNAL_STATE_IS_MATCHING_FAIL_MIN ((uint8_t)0)
#define INTERNAL_STATE_IS_MATCHING_FAIL_MAX ((uint8_t)1)
#define INTERNAL_STATE_IS_RELP_FAIL_MIN ((uint8_t)0)
#define INTERNAL_STATE_IS_RELP_FAIL_MAX ((uint8_t)1)
#define INTERNAL_STATE_LATERAL_ERROR_MAX ((float)10)
#define INTERNAL_STATE_LONGITUDINAL_ERROR_MAX ((float)1000)
#define INTERNAL_STATE_HEADING_ERROR_MAX ((double)180)
#define INTERNAL_STATE_KALMAN_FILTER_STATE_MIN ((bool)0)
#define INTERNAL_STATE_KALMAN_FILTER_STATE_MAX ((bool)1)
#define INTERNAL_STATE_LANE_POE_STATE_MIN ((uint8_t)0)
#define INTERNAL_STATE_LANE_POE_STATE_MAX ((uint8_t)1)

/* 内部監視状態 */
typedef struct {
  int8_t lat_correction_type; /* 横位置補正情報 */
  uint8_t is_matching_fail;   /* 路面照合異常フラグ */
  uint8_t is_relp_fail;       /* RELP異常フラグ */
  float lateral_error;        /* ローカライズ横偏差信頼度 */
  float longitudinal_error;   /* ローカライズ縦偏差信頼度 */
  double heading_error;       /* ローカライズ方位角偏差信頼度 */
  bool kalman_filter_state;   /* カルマンフィルタ動作フラグ */
  uint8_t lane_poe_state;     /* LanePOE動作フラグ */
} InternalState;

size_t SerializeInternalState(void *buffer, InternalState *data,
                              size_t max_buffer_size);
size_t SerializeInternalStateAutoRelease(void *buffer, void *data,
                                         size_t max_buffer_size);
size_t DeserializeInternalState(InternalState *data, void *buffer);
bool IsEqualInternalState(InternalState *data1, InternalState *data2);
void InitializeInternalState(InternalState *data);
void InitializeDefaultOnlyInternalState(InternalState *data);

#ifdef __cplusplus
}
#endif

#endif // DATA_DEFINITION_INTERNALSTATE_H
