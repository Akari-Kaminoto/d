#include "ADXTpcmObjInfo.h"
#include "data_ptr.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

static inline size_t Serializechar(void *buffer, char *data,
                                   size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_CHAR > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_CHAR);

  return APPFW_PRIMITIVE_SIZE_CHAR;
}

static inline size_t Serializebool(void *buffer, bool *data,
                                   size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_BOOL > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  uint8_t tmp = (*data == true) ? 1 : 0;
  memcpy(buffer, &tmp, APPFW_PRIMITIVE_SIZE_BOOL);

  return APPFW_PRIMITIVE_SIZE_BOOL;
}

static inline size_t Serializeint8_t(void *buffer, int8_t *data,
                                     size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT8_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT8_T);

  return APPFW_PRIMITIVE_SIZE_INT8_T;
}

static inline size_t Serializeint16_t(void *buffer, int16_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT16_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT16_T);

  return APPFW_PRIMITIVE_SIZE_INT16_T;
}

static inline size_t Serializeint32_t(void *buffer, int32_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT32_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT32_T);

  return APPFW_PRIMITIVE_SIZE_INT32_T;
}

static inline size_t Serializeint64_t(void *buffer, int64_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_INT64_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_INT64_T);

  return APPFW_PRIMITIVE_SIZE_INT64_T;
}

static inline size_t Serializeuint8_t(void *buffer, uint8_t *data,
                                      size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT8_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT8_T);

  return APPFW_PRIMITIVE_SIZE_UINT8_T;
}

static inline size_t Serializeuint16_t(void *buffer, uint16_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT16_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT16_T);

  return APPFW_PRIMITIVE_SIZE_UINT16_T;
}

static inline size_t Serializeuint32_t(void *buffer, uint32_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT32_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT32_T);

  return APPFW_PRIMITIVE_SIZE_UINT32_T;
}

static inline size_t Serializeuint64_t(void *buffer, uint64_t *data,
                                       size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_UINT64_T > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_UINT64_T);

  return APPFW_PRIMITIVE_SIZE_UINT64_T;
}

static inline size_t Serializefloat(void *buffer, float *data,
                                    size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_FLOAT > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_FLOAT);

  return APPFW_PRIMITIVE_SIZE_FLOAT;
}

static inline size_t Serializedouble(void *buffer, double *data,
                                     size_t max_buffer_size) {
  if (APPFW_PRIMITIVE_SIZE_DOUBLE > max_buffer_size) {
    Slog_Error("ERROR: Data Size Over @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(buffer, data, APPFW_PRIMITIVE_SIZE_DOUBLE);

  return APPFW_PRIMITIVE_SIZE_DOUBLE;
}

static inline size_t Deserializechar(char *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_CHAR);

  return APPFW_PRIMITIVE_SIZE_CHAR;
}

static inline size_t Deserializebool(bool *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  uint8_t tmp;
  memcpy(&tmp, buffer, APPFW_PRIMITIVE_SIZE_BOOL);
  *data = (tmp != 0) ? true : false;

  return APPFW_PRIMITIVE_SIZE_BOOL;
}

static inline size_t Deserializeint8_t(int8_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT8_T);

  return APPFW_PRIMITIVE_SIZE_INT8_T;
}

static inline size_t Deserializeint16_t(int16_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT16_T);

  return APPFW_PRIMITIVE_SIZE_INT16_T;
}

static inline size_t Deserializeint32_t(int32_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT32_T);

  return APPFW_PRIMITIVE_SIZE_INT32_T;
}

static inline size_t Deserializeint64_t(int64_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_INT64_T);

  return APPFW_PRIMITIVE_SIZE_INT64_T;
}

static inline size_t Deserializeuint8_t(uint8_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT8_T);

  return APPFW_PRIMITIVE_SIZE_UINT8_T;
}

static inline size_t Deserializeuint16_t(uint16_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT16_T);

  return APPFW_PRIMITIVE_SIZE_UINT16_T;
}

static inline size_t Deserializeuint32_t(uint32_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT32_T);

  return APPFW_PRIMITIVE_SIZE_UINT32_T;
}

static inline size_t Deserializeuint64_t(uint64_t *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_UINT64_T);

  return APPFW_PRIMITIVE_SIZE_UINT64_T;
}

static inline size_t Deserializefloat(float *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_FLOAT);

  return APPFW_PRIMITIVE_SIZE_FLOAT;
}

static inline size_t Deserializedouble(double *data, void *buffer) {
  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  memcpy(data, buffer, APPFW_PRIMITIVE_SIZE_DOUBLE);

  return APPFW_PRIMITIVE_SIZE_DOUBLE;
}

static inline bool IsEqualchar(char *data1, char *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualbool(bool *data1, bool *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint8_t(int8_t *data1, int8_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint16_t(int16_t *data1, int16_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint32_t(int32_t *data1, int32_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualint64_t(int64_t *data1, int64_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint8_t(uint8_t *data1, uint8_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint16_t(uint16_t *data1, uint16_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint32_t(uint32_t *data1, uint32_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualuint64_t(uint64_t *data1, uint64_t *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualfloat(float *data1, float *data2) {
  return *data1 == *data2 ? true : false;
}
static inline bool IsEqualdouble(double *data1, double *data2) {
  return *data1 == *data2 ? true : false;
}

size_t SerializeADXTpcmObjInfo(void *buffer, ADXTpcmObjInfo *data,
                               size_t max_buffer_size) {
  char *buffer_to_write = (char *)buffer;
  size_t data_size = 0;
  size_t check_data_size = 0;

  if (data == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  check_data_size = Serializeuint16_t(buffer_to_write, (uint16_t *)&(data->id),
                                      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  int16_t *err_cov_to_one_dim = &data->err_cov[0];
  for (size_t i = 0; i < (21); i++) {
    check_data_size =
        Serializeint16_t(buffer_to_write, (int16_t *)&(err_cov_to_one_dim[i]),
                         max_buffer_size - data_size);
    if (check_data_size == 0) {
      Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
      return 0;
    }
    data_size += check_data_size;
    buffer_to_write += check_data_size;
  }

  check_data_size =
      Serializeuint8_t(buffer_to_write, (uint8_t *)&(data->attribute),
                       max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializeuint8_t(buffer_to_write,
                                     (uint8_t *)&(data->attribute_likelihood),
                                     max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->dist),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializefloat(buffer_to_write, (float *)&(data->lateral_loc),
                     max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializefloat(buffer_to_write, (float *)&(data->relative_speed),
                     max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write,
                                   (float *)&(data->relative_lateral_velocity),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->width),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->height),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->angle),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->heading),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = Serializefloat(buffer_to_write, (float *)&(data->depth),
                                   max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializefloat(buffer_to_write, (float *)&(data->angle_width_and_height),
                     max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializeuint8_t(buffer_to_write, (uint8_t *)&(data->new_object_flag),
                       max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializeuint16_t(buffer_to_write, (uint16_t *)&(data->tracking_count),
                        max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializeuint8_t(buffer_to_write, (uint8_t *)&(data->hidden_count),
                       max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      Serializeuint8_t(buffer_to_write, (uint8_t *)&(data->extrapolating_flag),
                       max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size =
      SerializeObjCarInfo(buffer_to_write, (ObjCarInfo *)&(data->obj_car_info),
                          max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjWalkerInfo(
      buffer_to_write, (ObjWalkerInfo *)&(data->obj_walker_info),
      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjBicycleInfo(
      buffer_to_write, (ObjBicycleInfo *)&(data->obj_bicycle_info),
      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjSignboardInfo(
      buffer_to_write, (ObjSignboardInfo *)&(data->obj_signboard_info),
      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjFallingInfo(
      buffer_to_write, (ObjFallingInfo *)&(data->obj_falling_info),
      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjConstructionEquipmentInfo(
      buffer_to_write,
      (ObjConstructionEquipmentInfo *)&(data->obj_construction_equipment_info),
      max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  check_data_size = SerializeObjMiscInfo(buffer_to_write,
                                         (ObjMiscInfo *)&(data->obj_misc_info),
                                         max_buffer_size - data_size);
  if (check_data_size == 0) {
    Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  data_size += check_data_size;
  buffer_to_write += check_data_size;

  uint8_t *ext_reserved_to_one_dim = &data->ext_reserved[0];
  for (size_t i = 0; i < (64); i++) {
    check_data_size = Serializeuint8_t(buffer_to_write,
                                       (uint8_t *)&(ext_reserved_to_one_dim[i]),
                                       max_buffer_size - data_size);
    if (check_data_size == 0) {
      Slog_Error("ERROR: Serialize Function @%s, %d", __FILE__, __LINE__);
      return 0;
    }
    data_size += check_data_size;
    buffer_to_write += check_data_size;
  }

  return data_size;
}

size_t SerializeADXTpcmObjInfoAutoRelease(void *buffer, void *data,
                                          size_t max_buffer_size) {
  size_t ss =
      SerializeADXTpcmObjInfo(buffer, (ADXTpcmObjInfo *)data, max_buffer_size);
  DataPtr_Release(data);
  return ss;
}

size_t DeserializeADXTpcmObjInfo(ADXTpcmObjInfo *data, void *buffer) {
  char *buffer_to_read = (char *)buffer;
  size_t data_size = 0;
  size_t check_data_size = 0;

  if (buffer == NULL) {
    Slog_Error("ERROR :Source Data is NULL @%s, %d", __FILE__, __LINE__);
    return 0;
  }

  check_data_size =
      Deserializeuint16_t((uint16_t *)&(data->id), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }\
  buffer_to_read += check_data_size;
  data_size += check_data_size;
  int16_t *err_cov_to_one_dim = &data->err_cov[0];
  for (size_t i = 0; i < (21); i++) {
    check_data_size =
        Deserializeint16_t((int16_t *)&(err_cov_to_one_dim[i]), buffer_to_read);

    if (check_data_size == 0) {
      Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
      return 0;
    }
    buffer_to_read += check_data_size;
    data_size += check_data_size;
  }

  check_data_size =
      Deserializeuint8_t((uint8_t *)&(data->attribute), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializeuint8_t((uint8_t *)&(data->attribute_likelihood),
                                       buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->dist), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size =
      Deserializefloat((float *)&(data->lateral_loc), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size =
      Deserializefloat((float *)&(data->relative_speed), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat(
      (float *)&(data->relative_lateral_velocity), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->width), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->height), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->angle), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->heading), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->depth), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializefloat((float *)&(data->angle_width_and_height),
                                     buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size =
      Deserializeuint8_t((uint8_t *)&(data->new_object_flag), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size =
      Deserializeuint16_t((uint16_t *)&(data->tracking_count), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size =
      Deserializeuint8_t((uint8_t *)&(data->hidden_count), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = Deserializeuint8_t((uint8_t *)&(data->extrapolating_flag),
                                       buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjCarInfo((ObjCarInfo *)&(data->obj_car_info),
                                          buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjWalkerInfo(
      (ObjWalkerInfo *)&(data->obj_walker_info), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjBicycleInfo(
      (ObjBicycleInfo *)&(data->obj_bicycle_info), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjSignboardInfo(
      (ObjSignboardInfo *)&(data->obj_signboard_info), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjFallingInfo(
      (ObjFallingInfo *)&(data->obj_falling_info), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjConstructionEquipmentInfo(
      (ObjConstructionEquipmentInfo *)&(data->obj_construction_equipment_info),
      buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;

  check_data_size = DeserializeObjMiscInfo(
      (ObjMiscInfo *)&(data->obj_misc_info), buffer_to_read);
  if (check_data_size == 0) {
    Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
    return 0;
  }
  buffer_to_read += check_data_size;
  data_size += check_data_size;
  uint8_t *ext_reserved_to_one_dim = &data->ext_reserved[0];
  for (size_t i = 0; i < (64); i++) {
    check_data_size = Deserializeuint8_t(
        (uint8_t *)&(ext_reserved_to_one_dim[i]), buffer_to_read);

    if (check_data_size == 0) {
      Slog_Error("ERROR :Deserialize Function @%s, %d", __FILE__, __LINE__);
      return 0;
    }
    buffer_to_read += check_data_size;
    data_size += check_data_size;
  }

  return data_size;
}

size_t DeserializeADXTpcmObjInfoForDumper(void *data, void *buffer) {
  size_t ss = DeserializeADXTpcmObjInfo((ADXTpcmObjInfo *)data, buffer);
  size_t ret = sizeof(ADXTpcmObjInfo);
  if (ss != ADXTPCMOBJINFO_SERIALIZED_SIZE) {
    ret = 0;
  }

  return ret;
}

bool IsEqualADXTpcmObjInfo(ADXTpcmObjInfo *data1, ADXTpcmObjInfo *data2) {
  bool retval = true;
  retval = IsEqualuint16_t(&data1->id, &data2->id);
  if (!retval) {
    return false;
  }
  int16_t *data1_err_cov_to_one_dim = &data1->err_cov[0];
  int16_t *data2_err_cov_to_one_dim = &data2->err_cov[0];

  for (size_t i = 0; i < (21); i++) {
    retval = IsEqualint16_t(&data1_err_cov_to_one_dim[i],
                            &data2_err_cov_to_one_dim[i]);
    if (!retval) {
      return false;
    }
  }
  retval = IsEqualuint8_t(&data1->attribute, &data2->attribute);
  if (!retval) {
    return false;
  }
  retval = IsEqualuint8_t(&data1->attribute_likelihood,
                          &data2->attribute_likelihood);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->dist, &data2->dist);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->lateral_loc, &data2->lateral_loc);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->relative_speed, &data2->relative_speed);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->relative_lateral_velocity,
                        &data2->relative_lateral_velocity);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->width, &data2->width);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->height, &data2->height);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->angle, &data2->angle);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->heading, &data2->heading);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->depth, &data2->depth);
  if (!retval) {
    return false;
  }
  retval = IsEqualfloat(&data1->angle_width_and_height,
                        &data2->angle_width_and_height);
  if (!retval) {
    return false;
  }
  retval = IsEqualuint8_t(&data1->new_object_flag, &data2->new_object_flag);
  if (!retval) {
    return false;
  }
  retval = IsEqualuint16_t(&data1->tracking_count, &data2->tracking_count);
  if (!retval) {
    return false;
  }
  retval = IsEqualuint8_t(&data1->hidden_count, &data2->hidden_count);
  if (!retval) {
    return false;
  }
  retval =
      IsEqualuint8_t(&data1->extrapolating_flag, &data2->extrapolating_flag);
  if (!retval) {
    return false;
  }
  retval = IsEqualObjCarInfo(&data1->obj_car_info, &data2->obj_car_info);
  if (!retval) {
    return false;
  }
  retval =
      IsEqualObjWalkerInfo(&data1->obj_walker_info, &data2->obj_walker_info);
  if (!retval) {
    return false;
  }
  retval =
      IsEqualObjBicycleInfo(&data1->obj_bicycle_info, &data2->obj_bicycle_info);
  if (!retval) {
    return false;
  }
  retval = IsEqualObjSignboardInfo(&data1->obj_signboard_info,
                                   &data2->obj_signboard_info);
  if (!retval) {
    return false;
  }
  retval =
      IsEqualObjFallingInfo(&data1->obj_falling_info, &data2->obj_falling_info);
  if (!retval) {
    return false;
  }
  retval = IsEqualObjConstructionEquipmentInfo(
      &data1->obj_construction_equipment_info,
      &data2->obj_construction_equipment_info);
  if (!retval) {
    return false;
  }
  retval = IsEqualObjMiscInfo(&data1->obj_misc_info, &data2->obj_misc_info);
  if (!retval) {
    return false;
  }
  uint8_t *data1_ext_reserved_to_one_dim = &data1->ext_reserved[0];
  uint8_t *data2_ext_reserved_to_one_dim = &data2->ext_reserved[0];

  for (size_t i = 0; i < (64); i++) {
    retval = IsEqualuint8_t(&data1_ext_reserved_to_one_dim[i],
                            &data2_ext_reserved_to_one_dim[i]);
    if (!retval) {
      return false;
    }
  }

  return true;
}

// イニシャライザの実装
void InitializeADXTpcmObjInfo(ADXTpcmObjInfo *data) {
  memset(data, 0, sizeof(ADXTpcmObjInfo));
  InitializeDefaultOnlyADXTpcmObjInfo(data);
}

// データ定義書で指定されたデフォルト値のみ初期化するイニシャライザの実装
void InitializeDefaultOnlyADXTpcmObjInfo(ADXTpcmObjInfo *data) {
  InitializeDefaultOnlyObjCarInfo(&data->obj_car_info);
  InitializeDefaultOnlyObjWalkerInfo(&data->obj_walker_info);
  InitializeDefaultOnlyObjBicycleInfo(&data->obj_bicycle_info);
  InitializeDefaultOnlyObjSignboardInfo(&data->obj_signboard_info);
  InitializeDefaultOnlyObjFallingInfo(&data->obj_falling_info);
  InitializeDefaultOnlyObjConstructionEquipmentInfo(
      &data->obj_construction_equipment_info);
  InitializeDefaultOnlyObjMiscInfo(&data->obj_misc_info);
}